  Seems you have upgraded Yii Framework from version 2.0.18 to 2.0.36.

  Please check the upgrade notes for possible incompatible changes
  and adjust your application code accordingly.

  Upgrade from Yii 2.0.35
  -----------------------
  
  * Inline validator signature has been updated with 4th parameter `current`:
  
    ```php
    /**
     * @param mixed $current the currently validated value of attribute
     */
    function ($attribute, $params, $validator, $current)
    ```
  
  * Behavior of inline validator used as a rule of `EachValidator` has been changed - `$attribute` now refers to original
    model's attribute and not its temporary counterpart:
    
    ```php
    public $array_attribute = ['first', 'second'];
  
    public function rules()
    {
        return [
            ['array_attribute', 'each', 'rule' => ['customValidatingMethod']],
        ];
    }
    
    public function customValidatingMethod($attribute, $params, $validator, $current)
    {
        // $attribute === 'array_attribute' (as before)
    
        // now: $this->$attribute === ['first', 'second'] (on every iteration)
        // previously:
        // $this->$attribute === 'first' (on first iteration)
        // $this->$attribute === 'second' (on second iteration)
    
        // use now $current instead
        // $current === 'first' (on first iteration)
        // $current === 'second' (on second iteration)
    }
    ```
  
  * If you have any controllers that override the `init()` method, make sure they are calling `parent::init()` at
    the beginning, as demonstrated in the [component guide](https://www.yiiframework.com/doc/guide/2.0/en/concept-components).
  
  
  Upgrade from Yii 2.0.32
  -----------------------
  
  * `yii\helpers\ArrayHelper::filter` now correctly filters data when passing a filter with more than 2 "levels",
    e.g. `ArrayHelper::filter($myArray, ['A.B.C']`. Until Yii 2.0.32 all data after the 2nd level was returned,
    please see the following example:
    
    ```php
    $myArray = [
        'A' => 1,
        'B' => [
            'C' => 1,
            'D' => [
                'E' => 1,
                'F' => 2,
            ]
        ],
    ];
    ArrayHelper::filter($myArray, ['B.D.E']);
    ```
    
    Before Yii 2.0.33 this would return
    
    ```php
    [
        'B' => [
            'D' => [
                'E' => 1,
                'F' => 2, //Please note the unexpected inclusion of other elements
            ],
        ],
    ]
    ```
  
    Since Yii 2.0.33 this returns
  
    ```php
    [
        'B' => [
            'D' => [
                'E' => 1,
            ],
        ],
    ]
    ```
    
    Note: If you are only using up to 2 "levels" (e.g. `ArrayHelper::filter($myArray, ['A.B']`), this change has no impact.
    
  * `UploadedFile` class `deleteTempFile()` and `isUploadedFile()` methods introduced in 2.0.32 were removed.
  
  * Exception will be thrown if `UrlManager::$cache` configuration is incorrect (previously misconfiguration was silently 
    ignored and `UrlManager` continue to work without cache). Make sure that `UrlManager::$cache` is correctly configured 
    or set it to `null` to explicitly disable cache.
  
  Upgrade from Yii 2.0.31
  -----------------------
  
  * `yii\filters\ContentNegotiator` now generates 406 'Not Acceptable' instead of 415 'Unsupported Media Type' on
    content-type negotiation fail.
  
  Upgrade from Yii 2.0.30
  -----------------------
  * `yii\helpers\BaseInflector::slug()` now ensures there is no repeating $replacement string occurrences.
    In case you rely on Yii 2.0.16 - 2.0.30 behavior, consider replacing `Inflector` with your own implementation.
    
    
  Upgrade from Yii 2.0.28
  -----------------------
  
  * `yii\helpers\Html::tag()` now generates boolean attributes
    [according to HTML specification](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attribute).
    For `true` value attribute is present, for `false` value it is absent.  
  
  Upgrade from Yii 2.0.20
  -----------------------
  
  * `yii\db\Query::select()` and `addSelect()` now normalize the format that columns are stored in when saving them 
    to `$this->select`, so code that works directly with that property may need to be modified.
    
    For the following code:
    
    ```php
    $a = $query->select('*');
    $b = $query->select('id, name');
    ```
    
    The value was stored as is i.e.
    
    ```php
    // a
    ['*']
    
    // b
    ['id', 'name']
    ``` 
    
    Now it is stored as
    
    ```php
    // a
    ['*' => '*']
    
    // b
    ['id' => 'id', 'name' => 'name']
    ```

  You can find the upgrade notes for all versions online at:
  https://github.com/yiisoft/yii2/blob/2.0.36/framework/UPGRADE.md

(base) macbookpro-de-pierre:print pierre$ 
